import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.CubicCurve2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.QuadCurve2D;
import java.util.LinkedList;
import java.util.Random;

public class LinkedListVisualizer_v2 extends JPanel {
    private LinkedList<Integer> list = new LinkedList<>();
    private int current = -1;
    private JTextField textField;
    private boolean isCircular = false; 

    public LinkedListVisualizer_v2() {
        JFrame frame = new JFrame("LinkedList Visualizer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);

        frame.add(this, BorderLayout.CENTER);

        JPanel panel = new JPanel();
        textField = new JTextField(10);
        panel.add(textField);

        addButton(panel, "Insert", e -> insert());
        addButton(panel, "Delete", e -> delete());
        addButton(panel, "Search", e -> search());
        addButton(panel, "Sort", e -> sort());
        addButton(panel, "Circular", e -> toggleCircularMode());
        addButton(panel, "Shuffle", e -> shuffle());
        JLabel instructions = new JLabel("Enter numbers separated by spaces");
        panel.add(instructions);

        frame.add(panel, BorderLayout.SOUTH);

        frame.setVisible(true);
    }

    private void addButton(JPanel panel, String title, ActionListener listener) {
        JButton button = new JButton(title);
        button.addActionListener(listener);
        panel.add(button);
    }

    public void insert() {
        try {
            String[] values = textField.getText().split(" ");
            for (String value : values) {
                list.add(Integer.parseInt(value));
            }
            current = list.size() - 1;
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }
    public void shuffle(){
        Random rand = new Random();
        for (int i = list.size()-1;i>0;i--){
            int indexToSwap = rand.nextInt(i+1);
            Integer temp = list.get(i);
            list.set(i, list.get(indexToSwap));
            list.set(indexToSwap, temp);
        }
        repaint();
    }
    public void toggleCircularMode(){
        if (list.isEmpty()){
            return;
        }
        isCircular = !isCircular;
        repaint();
    }

    public void delete() {
        try {
            int value = Integer.parseInt(textField.getText());
            if (!list.removeFirstOccurrence(value)) {
                JOptionPane.showMessageDialog(null, "Value not found in the list");
            }
            current = Math.min(current, list.size() - 1);
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }

    public void search() {
        try {
            int value = Integer.parseInt(textField.getText());
            current = list.indexOf(value);
            if (current == -1) {
                JOptionPane.showMessageDialog(null, "Value not found in the list");
            }
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }

    public void sort() {
        list.sort(Integer::compareTo);
        repaint();
    }

    @Override
protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    Graphics2D g2 = (Graphics2D) g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

    int width = getWidth();
    int height = getHeight();
    int nodeSize = Math.min(width, height) / (list.size() + 1);
    int arrowOffset = 15; // Vertical offset for the arrows
    int y = height / 2;
    int nodeCount = list.size();
    int spacing = 20;
    int totalNodeWidth = nodeCount * (nodeSize + spacing);
    int startX = (width - totalNodeWidth)/2;
    

    for (int i = 0; i < nodeCount; i++) {
        //int x = (i + 1) * nodeSize;
        int x = startX + i * (nodeSize  + spacing);
        Ellipse2D.Double node = new Ellipse2D.Double(x - nodeSize / 2, y - nodeSize / 2, nodeSize, nodeSize);

        // Set the color to pink and fill the node
        g2.setColor(Color.PINK);
        g2.fill(node);

        // Set the color to black and draw the node outline
        g2.setColor(Color.BLACK);
        g2.draw(node);

        // Draw the node value
        FontMetrics fm = g2.getFontMetrics();
        double textWidth = fm.getStringBounds(Integer.toString(list.get(i)), g2).getWidth();
        g2.drawString(Integer.toString(list.get(i)), (int) (x - textWidth / 2), y + fm.getMaxAscent() / 2);

        // Draw arrows between nodes
        if (i < nodeCount - 1) {
            //int nextX = (i + 2) * nodeSize;
            int nextX = x + nodeSize + spacing;
            g2.setColor(Color.BLACK);
            // Draw line and arrow for the next link
            g2.drawLine(x + nodeSize / 2, y - arrowOffset, nextX - nodeSize / 2, y - arrowOffset);
            drawArrow(g2, nextX - nodeSize / 2, y - arrowOffset, x + nodeSize / 2, y - arrowOffset);
            // Draw line and arrow for the previous link
            g2.drawLine(x + nodeSize / 2, y + arrowOffset, nextX - nodeSize / 2, y + arrowOffset);
            drawArrow(g2, x + nodeSize / 2, y + arrowOffset, nextX - nodeSize / 2, y + arrowOffset);
        }

        // Highlight the current node
        if (i == current) {
            g2.setColor(Color.RED);
            g2.draw(node);
        }
    }

    // Draw a curved line for the circular link
    if (isCircular && !list.isEmpty()) {
        int firstX = startX; //+ nodeSize / 2; // Center of the first node
        int lastX =  startX + (nodeCount - 1) * (nodeSize + spacing) + nodeSize/2; /// 2;// Center of the last node
        int curveY = y - nodeSize * 2; // Position the curve above the nodes
        
        // Control points for the curve
        int controlX1 = lastX + nodeSize*2;
        int controlY1 = curveY;
        int controlX2 = firstX - nodeSize*2;
        int controlY2 = curveY;

        //calculate the intersection point:
        double angle = Math.atan2(controlY2 - y, controlX2 -firstX);
        int targetX = firstX + (int)(nodeSize/2 * Math.cos(angle));
        int targetY = y + (int)(nodeSize/2 * Math.sin(angle));

        // Draw the curve from the last node to the first node
        CubicCurve2D c = new CubicCurve2D.Double();
        c.setCurve(lastX, y, controlX1, controlY1, controlX2, controlY2, targetX, targetY);
        g2.setColor(Color.BLUE);
        g2.draw(c);

        // Draw an arrow at the end of the curve to complete the circular effect
        drawArrow(g2, (int) c.getCtrlX2(), (int) c.getCtrlY2(), targetX, targetY);
    }
  
     }


private void drawArrow(Graphics2D g2, int x1, int y1, int x2, int y2) {
    double arrowAngle = Math.toRadians(30);
    double arrowLength = 10;
    int dx = x2 - x1, dy = y2 - y1;
    double angle = Math.atan2(dy, dx);
    double x3 = x2 - arrowLength * Math.cos(angle + arrowAngle);
    double y3 = y2 - arrowLength * Math.sin(angle + arrowAngle);
    double x4 = x2 - arrowLength * Math.cos(angle - arrowAngle);
    double y4 = y2 - arrowLength * Math.sin(angle - arrowAngle);
    int[] xpoints = {x2, (int) x3, (int) x4};
    int[] ypoints = {y2, (int) y3, (int) y4};
    g2.fillPolygon(xpoints, ypoints, 3);
}

    public static void main(String[] args) {
        new LinkedListVisualizer_v2();
    }
}
