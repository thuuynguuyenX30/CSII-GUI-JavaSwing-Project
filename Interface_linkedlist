import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.util.LinkedList;

public class LinkedListVisualizer extends JPanel implements ActionListener {
    private LinkedList<Integer> list = new LinkedList<>();
    private int current = -1;
    private JTextField textField;
    JButton searchButton, insertButton, deleteButton, sortButton;

    public LinkedListVisualizer() {
        JFrame frame = new JFrame("LinkedList Visualizer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 400);
        frame.setLayout(new BorderLayout());
        // design titlePanel including Title, instruction and buttonPanel
        JPanel titlePanel = createTitlePanel();
        JPanel buttonMatrixPanel = createButtonMatrixPanel();
        JPanel resultDisplayPanel = createResultDisplayPanel();
        //textField = new JTextField(10);
        //titlePanel.add(textField);

        JLabel instructions = new JLabel("Enter numbers separated by spaces");
        titlePanel.add(instructions, BorderLayout.WEST);
        JTextField searchBox = new JTextField(20); // Adjust the size as needed
        titlePanel.add(searchBox, BorderLayout.CENTER);
       
        //create buttons
        searchButton = new JButton("Search");
        insertButton = new JButton("Insert");
        deleteButton = new JButton("Delete"); 
        sortButton = new JButton("Sort");
        // Set color
        searchButton.setBackground(Color.ORANGE);
        insertButton.setBackground(Color.ORANGE);
        deleteButton.setBackground(Color.ORANGE);
        sortButton.setBackground(Color.ORANGE);
        //Action Listener
        searchButton.addActionListener(this);
        insertButton.addActionListener(this);
        deleteButton.addActionListener(this);
        sortButton.addActionListener(this);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(searchButton);
        buttonPanel.add(insertButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(sortButton);

        titlePanel.add(buttonPanel, BorderLayout.SOUTH);
    
        //frame.add(panel, BorderLayout.SOUTH);
        frame.add(titlePanel, BorderLayout.NORTH);
        frame.add(buttonMatrixPanel, BorderLayout.WEST);
        frame.add(resultDisplayPanel, BorderLayout.CENTER);

        frame.setVisible(true);
    }
    //
    private static JPanel createTitlePanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        // Create and add the title label
        JLabel titleLabel = new JLabel("Linked List Stimulation");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20)); // Set font size and style
        titleLabel.setForeground(Color.RED); // Set font color
        titleLabel.setHorizontalAlignment(JLabel.CENTER); // Center the text
        panel.add(titleLabel, BorderLayout.NORTH);
        return panel;
    }
    //create button matrix
    private static JPanel createButtonMatrixPanel() {
        JPanel panel = new JPanel();
        panel.setPreferredSize(new Dimension(500, 350));
        //panel.setBackground(Color.pink);
        // Add buttons 
        panel.setLayout(new GridLayout(3, 3,5 ,5)); 
        for (int i = 1; i <= 9; i++) {
            JButton button = new JButton(Integer.toString(i));
            button.setBackground(Color.PINK);
            button.setForeground(Color.WHITE); // Set text color
            button.setFont(new Font("Arial", Font.PLAIN, 16)); // Set font size
            button.setMargin(new Insets(10, 20, 10, 20)); // Set padding
            button.setPreferredSize(new Dimension(100, 500));
            panel.add(button);
        }
        return panel;
    }

    private static JPanel createResultDisplayPanel() {
        JPanel panel = new JPanel();
        panel.setBounds(200, 100, 200, 150);
        // Add custom drawing or other components for result display
        panel.setPreferredSize(new Dimension(400, 300));
        panel.setBackground(Color.CYAN);
        JTextField textField = new JTextField("Your linked list");
        textField.setEditable(false); // Make it non-editable
        textField.setFont(new Font("Arial", Font.BOLD, 16)); // Set font size and style
        textField.setForeground(Color.BLUE);
        textField.setHorizontalAlignment(JTextField.CENTER); // Center the text
        panel.setLayout(new BorderLayout()); // Use BorderLayout
        panel.add(textField, BorderLayout.NORTH); // Add text field to the top

        return panel;
    }


    public void insert() {
        try {
            String[] values = textField.getText().split(" ");
            for (String value : values) {
                list.add(Integer.parseInt(value));
            }
            current = list.size() - 1;
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }

    public void delete() {
        try {
            int value = Integer.parseInt(textField.getText());
            if (!list.removeFirstOccurrence(value)) {
                JOptionPane.showMessageDialog(null, "Value not found in the list");
            }
            current = Math.min(current, list.size() - 1);
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }

    public void search() {
        try {
            int value = Integer.parseInt(textField.getText());
            current = list.indexOf(value);
            if (current == -1) {
                JOptionPane.showMessageDialog(null, "Value not found in the list");
            }
            repaint();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input: " + e.getMessage());
        }
    }

    public void sort() {
        list.sort(Integer::compareTo);
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        int width = getWidth();
        int height = getHeight();
        int nodeSize = Math.min(width, height) / (list.size() + 1);

        for (int i = 0; i < list.size(); i++) {
            int x = (i + 1) * nodeSize;
            int y = height / 2;
            Ellipse2D.Double node = new Ellipse2D.Double(x, y, nodeSize, nodeSize);

            // Set the color to pink and fill the node
            g2.setColor(Color.PINK);
            g2.fill(node);

            // Set the color to black and draw the node outline
            g2.setColor(Color.BLACK);
            g2.draw(node);

            // Draw the node value
            g2.drawString(Integer.toString(list.get(i)), x + nodeSize / 2, y + nodeSize / 2);

            // Highlight the current node
            if (i == current) {
                g2.setColor(Color.RED);
                g2.draw(node);
            }

            // Draw the edge between nodes
            if (i > 0) {
                g2.setColor(Color.BLACK);
                g2.drawLine(x - nodeSize, y + nodeSize / 2, x, y + nodeSize / 2);
            }
        }
    }

    @Override
    public void ActionPerformed(ActionEvent e){
        if (e.getSource() == searchButton){
            search();
        }
        if (e.getSource() == insertButton){
            insert();
        }
        if (e.getSource() == deleteButton){
            delete();
        }
        if (e.getSource() == sortButton){
            sort();
        }

    }

    // public static void main(String[] args) {
    //     new LinkedListVisualizer();
    // }
}
