// // import javax.swing.*;
// // import java.awt.*;
// // import java.awt.geom.QuadCurve2D;
// // import java.awt.event.ActionEvent;
// // import java.awt.event.ActionListener;
// // import java.util.List;
// // import java.util.ArrayList;
// // import java.awt.event.FocusListener;
// // import java.awt.geom.AffineTransform;
// // import java.awt.event.FocusEvent;


// // class HappyNumberPanel extends JPanel{
// //     private List<Integer> sequence = new ArrayList<>();
// //     private int cycleStartIndex = -1;
// //     public void setSequence(List<Integer> sequence, int cycleStartIndex){
// //         this.sequence = sequence;
// //         this.cycleStartIndex = cycleStartIndex;

// //         repaint();
// //     }
// //     @Override
// //     protected void paintComponent(Graphics g){
// //         super.paintComponent(g);
// //         if (sequence.isEmpty()){
// //         return;
// //     }

// //     Graphics2D g2d = (Graphics2D) g;
// //     g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);


// //     int radius = 25;// đường kính của hình tròn
// //     int padding = 10; //đô dài của arrow
// //     int x = padding;
// //     int y = getHeight() /2;

// //     for (int i = 0; i < sequence.size(); i++){
// //         int number = sequence.get(i);
// //         boolean isCycleStartNode = (i == cycleStartIndex);
// //         boolean isHappyOneNode = (number == 1);
// //         if (isHappyOneNode) {
// //             g2d.setColor(Color.GREEN);// Happy one Node
// //             g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
// //             g2d.setColor(Color.BLACK);
// //         } else if (isCycleStartNode) {
// //             g2d.setColor(Color.RED); // Cycle Linked List Start Node
// //             g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
// //             g2d.setColor(Color.BLACK); //
// //         }


// //         g2d.drawOval(x, y-radius, 2*radius, 2*radius);
// //         String numberStr = String.valueOf(sequence.get(i));
// //         FontMetrics fm = g2d.getFontMetrics();
// //         int numberX = x + radius - fm.stringWidth(numberStr) / 2;
// //         int numberY = y + fm.getHeight() / 2 - fm.getDescent();
// //         g2d.drawString(numberStr, numberX, numberY);

// //         if (i < sequence.size() - 1) {
// //             int startX = x + radius*2 ;
// //             int startY = y;
// //             int endX = x + 3 * radius + padding- (radius);
// //             int endY = y;
// //             drawArrow(g2d, startX, startY, endX, endY);
// //         }
// //         x += 2 * radius + padding;
// //     }
// //     if (!sequence.isEmpty() && sequence.get(sequence.size() - 1) == 1) {
// //         int startX = x-10;
// //         int startY = y;
// //         int nullX = startX + padding + 20; 
// //         int adjustedX2 = nullX+10; 
// //         drawArrowToPointingToNull(g2d, startX, startY, adjustedX2,y); 

// //         // Optionally adjust the position where "null" is drawn if needed
// //         drawNullPointer(g2d, adjustedX2, y); // Adjusted to draw "null" near the shortened arrow's end
// //     }

// //     if (cycleStartIndex != -1 && cycleStartIndex < sequence.size() - 1) {
// //         int lastUniqueX = padding + (sequence.size() - 1) * ( 2*radius + padding);
// //         int cycleStartX = padding + cycleStartIndex * ( 2*radius + padding);
// //         drawCurvedArrow(g2d, lastUniqueX, y, cycleStartX, y,radius);
// //     }
// //     }
// //     private void drawArrowToPointingToNull(Graphics2D g2, int x1, int y1, int x2, int y2) {
// //         drawArrow(g2, x1, y1, x2, y2); 
// //     }

// //     private void drawNullPointer(Graphics2D g2, int x, int y) {
// //         g2.drawString("null", x, y + 5); // Adjust the y position to align with the node's center
// //     }



// //     private void drawCurvedArrow(Graphics2D g2, int x1, int y1, int x2, int y2, int radius) {
// //         double angle = Math.atan2(y2 - y1, x2 - x1);
// //         int startX = (int) (x1 + 12+Math.cos(angle - Math.PI / 2) * radius);
// //         int startY = (int) (y1 - Math.sin(angle - Math.PI / 2) * radius);
// //         int endX = (int) (x2 + Math.cos(angle + Math.PI-1 ) * radius);
// //         int endY = (int) (y2 + Math.sin(angle + Math.PI -1) * radius);
// //         int ctrlX = (startX - endX+6) / 2;
// //         int ctrlY =  startY - Math.abs(startX - endX) / 3; 
// //         g2.setColor(Color.BLUE); // curve 
// //         g2.setStroke(new BasicStroke(3)); 
// //         QuadCurve2D q = new QuadCurve2D.Float();
// //         q.setCurve(startX, startY, ctrlX, ctrlY, endX, endY);
// //         g2.draw(q);
// //         drawArrowhead(g2, ctrlX, ctrlY, endX, endY);
// //         g2.setColor(Color.BLACK);
// //         g2.setStroke(new BasicStroke(1));
// //     }

// //     private void drawArrowhead(Graphics2D g2, int x1, int y1, int x2, int y2) {
// //         double angle = Math.atan2(y2 - y1, x2 - x1);
// //         int arrowLength = 10;
// //         double arrowAngle = Math.PI / 6;
// //         double x3 = x2 - arrowLength * Math.cos(angle - arrowAngle);
// //         double y3 = y2 - arrowLength * Math.sin(angle - arrowAngle);
// //         double x4 = x2 - arrowLength * Math.cos(angle + arrowAngle);
// //         double y4 = y2 - arrowLength * Math.sin(angle + arrowAngle);

// //         int[] xPoints = {x2, (int) x3, (int) x4};
// //         int[] yPoints = {y2, (int) y3, (int) y4};
// //         g2.fillPolygon(xPoints, yPoints, 3);
// //     }

// //     private void drawArrow(Graphics g, int x1, int y1, int x2, int y2) {
// //         Graphics2D g2 = (Graphics2D) g.create();
// //         double dx = x2 - x1, dy = y2 - y1;
// //         double angle = Math.atan2(dy, dx);
// //         int len = (int) Math.sqrt(dx * dx + dy * dy);
// //         AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
// //         at.concatenate(AffineTransform.getRotateInstance(angle));
// //         g2.transform(at);

// //         g2.drawLine(0, 0, len, 0);
// //         g2.fillPolygon(new int[]{len, len - 5, len - 5, len},
// //                     new int[]{0, -5, 5, 0}, 4);
// //     }
// // }


// // public class HappyNumber extends JFrame {
// //     private JTextField inputField;
// //     private static JTextArea resultArea;
// //     private check_isHappyNum checker;
// //     private int randomNumber;
// //     private HappyNumberPanel happyNumberPanel;
// //     public HappyNumber() {
// //         happyNumberPanel = new HappyNumberPanel();
// //         checker = new check_isHappyNum(happyNumberPanel);
// //         JFrame frame = new JFrame("Happy Number Checker");
// //         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
// //         frame.setSize(600, 400);
// //         frame.setLayout(new BorderLayout());
// //         frame.setBackground(Color.GREEN);

// //         JPanel leftPanel = new JPanel();
// //         leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
// //         leftPanel.setBounds(100, 100, 300, 400);
// //         leftPanel.setBackground(new Color(254, 197, 216)); //0xFFD1ED
// //         String intro = "             \r\n" +
// //                        "       Happy number: A positive integer is a number which \r\n" +
// //                        "       eventually reaches 1 when replaced by the sum of the \r\n" +
// //                        "       square of each digit\r\n" +
// //                        "            Example 1: n = 19 \r\n" +
// //                        "            Output: 19 is a happy number \r\n" +
// //                        "            Explain: 1^2 + 9^2 = 82; 8^2  + 2^2 = 68\r\n" +
// //                        "            6^2 + 8^2 = 100; 1^2 + 0^2 + 0^2 = 1 \r\n" +
// //                        "             \r\n   ";
                        

// //         JTextArea introductionLabel = new JTextArea(intro);
// //         introductionLabel.setEditable(false);
// //         introductionLabel.setLineWrap(true);
// //         introductionLabel.setWrapStyleWord(true);
// //         introductionLabel.setFont(new Font("Serif", Font.BOLD, 16));
// //         introductionLabel.setForeground(new Color(186, 28, 80));
// //         //introductionLabel.setForeground(new Color (122, 106, 169));
// //         introductionLabel.setPreferredSize(new Dimension(450, 200));
// //         introductionLabel.setBackground(Color.WHITE);
// //         introductionLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

// //         JLabel mode1Label = new JLabel("Happy Number Checker", SwingConstants.CENTER);
// //         mode1Label.setFont(new Font("Roboto", Font.BOLD, 17));
// //         mode1Label.setForeground(new Color (186, 28, 80));
// //         mode1Label.setAlignmentX(Component.CENTER_ALIGNMENT);

// //         inputField = new JTextField();
// //         inputField.setMaximumSize(new Dimension(175, 80));
// //         inputField.setText("Enter your valid number");

        
// //         inputField.setForeground(Color.GRAY);
// //         inputField.addFocusListener(new FocusListener() {
// //         @Override
// //         public void focusGained(FocusEvent e) {
// //             String input = inputField.getText();
// //             if (input.length() > 0 ) {
// //                 inputField.setText("");
// //                 inputField.setForeground(Color.BLACK);
// //             }
// //         }
// //         @Override
// //         public void focusLost(FocusEvent e) {
// //             if (inputField.getText().isEmpty()) {
// //                 inputField.setForeground(Color.GRAY);
// //                 inputField.setText("Enter your valid number");
// //             }
// //         }
// //         });

// //         inputField.setFont(new Font("Serif", Font.BOLD, 15));
// //         inputField.setBackground(Color.WHITE);
// //         inputField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
// //         inputField.setAlignmentX(Component.CENTER_ALIGNMENT);
        
// //         JButton checkButton = new JButton("Check");
// //         checkButton.setBackground(new Color(0x1BC444));
// //         checkButton.setFocusPainted(false); // Remove focus border
// //         checkButton.setAlignmentX(Component.CENTER_ALIGNMENT);
// //         //checkButton.setBorderPainted(false); // Remove border
// //         checkButton.addActionListener(new ActionListener() {
// //             @Override
// //             public void actionPerformed(ActionEvent e) {
// //                 try {
// //                     int number = Integer.parseInt(inputField.getText());
// //                     checker.printHappySequence(number);
// //                 } catch (NumberFormatException ex) {
// //                     JOptionPane.showMessageDialog(null, "Please enter a valid integer.", "Error",
// //                             JOptionPane.ERROR_MESSAGE);
// //                 }
// //             }
// //         });

// //         JLabel mode2Label = new JLabel("Challenge Yourself!");
// //         mode2Label.setFont(new Font("Roboto", Font.BOLD, 17));
// //         mode2Label.setForeground(new Color (186, 28, 80));
// //         mode2Label.setAlignmentX(Component.CENTER_ALIGNMENT);

// //         JButton generateButton = new JButton("Generate Random Number");
// //         generateButton.setFocusPainted(false); 
// //         generateButton.setBackground(new Color(0xFE6C2B));
// //         generateButton.setAlignmentX(Component.CENTER_ALIGNMENT);
// //         generateButton.addActionListener(new ActionListener() {
// //             @Override
// //             public void actionPerformed(ActionEvent e) {
// //                 randomNumber = (int) (Math.random() * 1000);
// //                 inputField.setText(String.valueOf(randomNumber));
// //             }
// //         });

// //         JLabel resultLabel = new JLabel("Is this a Happy Number?");
// //         resultLabel.setFont(new Font("Arial", Font.BOLD, 17));
// //         resultLabel.setForeground(new Color (186, 28, 80));
// //         resultLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        

// //         JRadioButton yesButton = new JRadioButton("Yes");
// //         JRadioButton noButton = new JRadioButton("No");

// //         ButtonGroup group = new ButtonGroup();
// //         group.add(yesButton);
// //         group.add(noButton);

// //         //JButton yesButton = new JButton("Yes");
// //         yesButton.setFocusPainted(false); 
// //         yesButton.setBackground(new Color(0x1BC444));
// //         yesButton.setAlignmentX(Component.CENTER_ALIGNMENT);

// //         yesButton.addActionListener(new ActionListener() {
// //             @Override
// //             public void actionPerformed(ActionEvent e) {
// //                 boolean isHappy = checker.isHappy(randomNumber);
// //                 if (isHappy) {
// //                     JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
// //                 } else {
// //                     JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
// //                 }
// //             }
// //         });

// //         //JButton noButton = new JButton("No");
// //         noButton.setFocusPainted(false); 
// //         noButton.setBackground(new Color(0xDB5230));
// //         noButton.setAlignmentX(Component.CENTER_ALIGNMENT);
// //         noButton.addActionListener(new ActionListener() {
// //             @Override
// //             public void actionPerformed(ActionEvent e) {
// //                 boolean isHappy = checker.isHappy(randomNumber);
// //                 if (!isHappy) {
// //                     JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
// //                 } else {
// //                     JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
// //                 }
// //             }
// //         });

// //         JButton explainButton = new JButton("Explain");
// //         explainButton.setBackground(new Color(0xF2D843));
// //         explainButton.setFocusPainted(false); 
// //         explainButton.setAlignmentX(Component.CENTER_ALIGNMENT);
// //         JButton clearButton = new JButton("Clear Canvas");
// //         clearButton.setFocusPainted(false); 
// //         clearButton.setBackground(new Color(0x0F96CF));
// //         clearButton.setAlignmentX(Component.CENTER_ALIGNMENT);
// //         clearButton.addActionListener(new ActionListener() {
// //             @Override
// //             public void actionPerformed(ActionEvent e) {
// //                 resultArea.setText("");
// //             }
// //         });

// //         leftPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 6));
// //         leftPanel.add(introductionLabel);
// //         leftPanel.add(Box.createVerticalStrut(20));
// //         leftPanel.add(mode1Label);
// //         leftPanel.add(Box.createVerticalStrut(35));
// //         leftPanel.add(inputField);
// //         leftPanel.add(Box.createVerticalStrut(25));
// //         leftPanel.add(checkButton);
// //         leftPanel.add(Box.createVerticalStrut(60));
// //         leftPanel.add(mode2Label);
// //         leftPanel.add(Box.createVerticalStrut(30));
// //         leftPanel.add(generateButton);
// //         leftPanel.add(Box.createVerticalStrut(70));
// //         leftPanel.add(resultLabel);
// //         leftPanel.add(Box.createVerticalStrut(20));
// //         leftPanel.add(yesButton);
// //         leftPanel.add(Box.createVerticalStrut(20));
// //         leftPanel.add(noButton);
// //         leftPanel.add(Box.createVerticalStrut(20));
// //         leftPanel.add(explainButton);
// //         leftPanel.add(Box.createVerticalStrut(20));
// //         leftPanel.add(clearButton);
// //         leftPanel.add(Box.createVerticalStrut(20));

// //         //JPanel rightPanel = new JPanel();
// //         // rightPanel.setBackground(Color.lightGray);

// //         // resultArea = new JTextArea();
// //         // resultArea.setEditable(false);
// //         // resultArea.setLineWrap(true);
// //         // resultArea.setWrapStyleWord(true);
// //         // resultArea.setFont(new Font("Serif", Font.BOLD, 16));
// //         // resultArea.setForeground(new Color(103, 134, 198));
// //         // resultArea.setPreferredSize(new Dimension(600, 300));
// //         // resultArea.setBackground(new Color(255, 236, 233));
// //         // resultArea.setBounds(500, 200, 400, 400);
// //         // resultArea.setBorder(BorderFactory.createLineBorder(Color.WHITE, 5));
// //         //rightPanel.add(resultArea);

    

// //         //rightPanel.add(resultArea, BorderLayout.SOUTH);
// //         //rightPanel.add(happyNumberPanel, BorderLayout.CENTER);
// //         happyNumberPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 5));
// //         happyNumberPanel.setBackground(new Color(255, 236, 233));
// //         frame.add(leftPanel, BorderLayout.WEST);
// //         frame.add(happyNumberPanel, BorderLayout.CENTER);
// //         frame.pack();
// //         frame.setVisible(true);
// // }

// // public static void main(String[] args) {
// //     SwingUtilities.invokeLater(new Runnable(){
// //         @Override
// //         public void run(){
// //             new HappyNumber();
// //         }

// //     });
// // }

// // public static JTextArea getResultArea() {
// //     return resultArea;
// // }

// // }
// // class Node {
// // int data;
// // Node next;
// // public Node(int data) {
// //     this.data = data;
// //     this.next = null;
// // }

// // }

// // class check_isHappyNum {
// // private Node head;
// // private HappyNumberPanel happyNumberPanel;
// // public check_isHappyNum(HappyNumberPanel happyNumberPanel){
// //     this.happyNumberPanel = happyNumberPanel;
// // }

// // public int getNext(int n) {
// //     int totalSum = 0;
// //     while (n > 0) {
// //         int d = n % 10;
// //         n = n / 10;
// //         totalSum += d * d;
// //     }
// //     return totalSum;
// // }
// // public boolean isHappy(int n) {
// //     int slow = n;
// //     int fast = getNext(n);

// //     while (fast != 1 && slow != fast) {
// //         slow = getNext(slow);
// //         fast = getNext(getNext(fast));
// //     }

// //     return fast == 1;
// // }

// // public void printHappySequence(int n) {
// //     head = new Node(n);
// //     Node current = head;
// //     String result = String.valueOf(current.data);
// //     List<Integer> sequenceList = new ArrayList<>();
// //     sequenceList.add(current.data);
// //     int cycleStartIndex = -1; 

// //     while (true) {
// //         int nextValue = getNext(current.data);
// //         if (nextValue == 1) {
// //             sequenceList.add(nextValue);
// //                 result += "-->" + nextValue + " Yay number is happy!";
// //                 break;
// //             } else if(contains(head, nextValue)) {
// //                 cycleStartIndex = sequenceList.indexOf(nextValue);
// //                 result += "-->" + nextValue + "(cycle detected - Number is Unhappy :< )";
// //                 break;
        
// //         }
// //         result += "-->" + nextValue;
// //         current.next = new Node(nextValue);
// //         current = current.next;
// //         sequenceList.add(nextValue);
// //     }
// //     happyNumberPanel.setSequence(sequenceList, cycleStartIndex);
// //     HappyNumber.getResultArea().append(result + "\n");
// // }


// // private boolean contains(Node head, int value) {
// //     Node current = head;
// //     while (current != null) {
// //         if (current.data == value) {
// //             return true;
// //         }
// //         current = current.next;
// //     }
// //     return false;
// // }

// // public boolean detect_cycle() {
// //     if (head == null) {
// //         return false;
// //     }
// //     Node slow = head;
// //     Node fast = head.next;
// //     while (slow != fast) {
// //         if (fast == null || fast.next == null) {
// //             return false;
// //         }
// //         slow = slow.next;
// //         fast = fast.next.next;
// //     }
// //     return true;
// // }

// // }


// import javax.swing.*;
// import java.awt.*;
// import java.awt.geom.QuadCurve2D;
// import java.awt.event.ActionEvent;
// import java.awt.event.ActionListener;
// import java.util.List;
// import java.util.ArrayList;
// import java.awt.event.FocusListener;
// import java.awt.geom.AffineTransform;
// import java.awt.event.FocusEvent;
// import javax.swing.Timer;


// class HappyNumberPanel extends JPanel{
//     private List<Integer> sequence = new ArrayList<>();
//     public void setSequence(List<Integer> sequence, int cycleStartIndex){
//         this.sequence = sequence;
//         this.cycleStartIndex = cycleStartIndex;

//         repaint();
//     }
//     private int cycleStartIndex = -1;
//     private int nodeIndexToDraw = 0;
//     private Timer timer;
//     public boolean drawCycleArrow = false;
//     public boolean highlightCycleNode = false;
//     private boolean drawToNull = false;
//     public HappyNumberPanel(){
//         timer = new Timer(100, new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 if (nodeIndexToDraw < sequence.size()) {
//                     nodeIndexToDraw++;
//                     repaint();
//                 } else if (nodeIndexToDraw == sequence.size()) {
//                     if (sequence.get(sequence.size() - 1) == 1 && !drawToNull) {
//                         drawToNull = true;
//                         repaint();
//                     } else if (!drawCycleArrow && cycleStartIndex != -1) {
//                         drawCycleArrow = true;
//                         repaint();
//                     } else if (drawCycleArrow && !highlightCycleNode) {
//                         highlightCycleNode = true;
//                         repaint();
//                     } else {
//                         timer.stop();
//                     }
//                 }
//             }
//         });
//     }
    
//     public void startDrawingSequence(){
//         nodeIndexToDraw = 0;
//         drawCycleArrow = false;
//         highlightCycleNode = false;
//         timer.start();
//     }
//     @Override
//     protected void paintComponent(Graphics g){
//         super.paintComponent(g);
//         if (sequence.isEmpty()){
//         return;
//     }

//     Graphics2D g2d = (Graphics2D) g;
//     g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);


//     int radius = 20;
//     int padding = 10;
//     int x = padding;
//     int y = getHeight() /2;

//     for (int i = 0; i < nodeIndexToDraw; i++) {
//         int number = sequence.get(i);
//         boolean isCycleStartNode = (i == cycleStartIndex);
//         boolean isHappyOneNode = (number == 1);

//         // Draw the node
//         if (isHappyOneNode && i == sequence.size() - 1) {
//             g2d.setColor(Color.GREEN); // Happy one Node
//         } else if (isCycleStartNode && highlightCycleNode) {
//             g2d.setColor(Color.RED); // Cycle start node
//         } else {
//             g2d.setColor(Color.PINK); // Regular node
//         }
//         g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
//         g2d.setColor(Color.BLACK);
//         g2d.drawOval(x, y - radius, 2 * radius, 2 * radius);

//         String numberStr = String.valueOf(number);
//         FontMetrics fm = g2d.getFontMetrics();
//         int numberX = x + radius - fm.stringWidth(numberStr) / 2;
//         int numberY = y + fm.getHeight() / 2 - fm.getDescent();
//         g2d.drawString(numberStr, numberX, numberY);


//         if (i < sequence.size() - 1) {
//             int startX = x + radius*2 ;
//             int startY = y;
//             int endX = x + 3 * radius + padding- (radius);
//             int endY = y;
//             drawArrow(g2d, startX, startY, endX, endY);
//         }
//         x += 2 * radius + padding;
//     }
//     if (drawToNull && sequence.get(sequence.size() - 1) == 1) {
//         int startX = x - radius  + padding;
//         int nullX = startX + padding + 20;
//         drawArrowToPointingToNull(g2d, startX, y, nullX, y);
//         drawNullPointer(g2d, nullX, y);
//     }


//     if (drawCycleArrow && cycleStartIndex != -1 && cycleStartIndex < sequence.size() - 1) {
//         int lastUniqueX = padding + (sequence.size() - 1) * (2 * radius + padding);
//         int cycleStartX = padding + cycleStartIndex * (2 * radius + padding);
//         drawCurvedArrow(g2d, lastUniqueX, y, cycleStartX, y, radius);
//     }else {}
//     if (highlightCycleNode && cycleStartIndex != -1) {
//         int cycleStartX = padding + cycleStartIndex * (2 * radius + padding);
//         highlightNode((Graphics2D) g, cycleStartX, y, radius);
//     }else{}}
//     private void highlightNode(Graphics2D g2d, int x, int y, int radius) {
//         g2d.setColor(Color.YELLOW); 
//         g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
//         g2d.setColor(Color.BLACK); 
//         g2d.drawOval(x, y - radius, 2 * radius, 2 * radius);

//         //number highlight
//         String numberStr = String.valueOf(sequence.get(cycleStartIndex));
//         FontMetrics fm = g2d.getFontMetrics();
//         int numberX = x + radius - fm.stringWidth(numberStr) / 2;
//         int numberY = y + fm.getHeight() / 2 - fm.getDescent();
//         g2d.drawString(numberStr, numberX, numberY);
//     }
 
//     private void drawArrowToPointingToNull(Graphics2D g2, int x1, int y1, int x2, int y2) {
//         drawArrow(g2, x1, y1, x2, y2); 
//     }

//     private void drawNullPointer(Graphics2D g2, int x, int y) {
//         g2.drawString(" NULL", x, y + 5); 
//     }


//     private void drawCurvedArrow(Graphics2D g2, int x1, int y1, int x2, int y2, int radius) {
//         double angle = Math.atan2(y2 - y1, x2 - x1);
//         int startX = (int) (x1 + 12+Math.cos(angle - Math.PI / 2) * radius);
//         int startY = (int) (y1 - Math.sin(angle - Math.PI / 2) * radius);
//         int endX = (int) (x2 + Math.cos(angle + Math.PI-1 ) * radius);
//         int endY = (int) (y2 + Math.sin(angle + Math.PI -1) * radius);
//         int ctrlX = (startX - endX+6) / 2;
//         int ctrlY =  startY - Math.abs(startX - endX) / 3; 
//         g2.setColor(Color.BLUE); // curve 
//         g2.setStroke(new BasicStroke(3)); 
//         QuadCurve2D q = new QuadCurve2D.Float();
//         q.setCurve(startX, startY, ctrlX, ctrlY, endX, endY);
//         g2.draw(q);
//         drawArrowhead(g2, ctrlX, ctrlY, endX, endY);
//         g2.setColor(Color.BLACK);
//         g2.setStroke(new BasicStroke(1));
//     }

//     private void drawArrowhead(Graphics2D g2, int x1, int y1, int x2, int y2) {
//         double angle = Math.atan2(y2 - y1, x2 - x1);
//         int arrowLength = 10;
//         double arrowAngle = Math.PI / 6;
//         double x3 = x2 - arrowLength * Math.cos(angle - arrowAngle);
//         double y3 = y2 - arrowLength * Math.sin(angle - arrowAngle);
//         double x4 = x2 - arrowLength * Math.cos(angle + arrowAngle);
//         double y4 = y2 - arrowLength * Math.sin(angle + arrowAngle);

//         int[] xPoints = {x2, (int) x3, (int) x4};
//         int[] yPoints = {y2, (int) y3, (int) y4};
//         g2.fillPolygon(xPoints, yPoints, 3);
//     }

//     private void drawArrow(Graphics g, int x1, int y1, int x2, int y2) {
//         Graphics2D g2 = (Graphics2D) g.create();
//         double dx = x2 - x1, dy = y2 - y1;
//         double angle = Math.atan2(dy, dx);
//         int len = (int) Math.sqrt(dx * dx + dy * dy);
//         AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
//         at.concatenate(AffineTransform.getRotateInstance(angle));
//         g2.transform(at);

//         g2.drawLine(0, 0, len, 0);
//         g2.fillPolygon(new int[]{len, len - 5, len - 5, len},
//                     new int[]{0, -5, 5, 0}, 4);
//     }
// }


// public class HappyNumber extends JFrame {
//     private JTextField inputField;
//     private static JTextArea resultArea;
//     private check_isHappyNum checker;
//     private int randomNumber;
//     private HappyNumberPanel happyNumberPanel;
//     public HappyNumber() {

//         happyNumberPanel = new HappyNumberPanel();
//         checker = new check_isHappyNum(happyNumberPanel);
//         JFrame frame = new JFrame("Happy Number Checker");
//         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//         frame.setSize(600, 400);
//         frame.setLayout(new BorderLayout());
//         frame.setBackground(Color.GREEN);

//         JPanel leftPanel = new JPanel();
//         leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
//         leftPanel.setBounds(100, 100, 300, 400);
//         leftPanel.setBackground(new Color(254, 197, 216)); //0xFFD1ED
//         String intro = "             \r\n" +
//                        "       Happy number: A positive integer is a number which \r\n" +
//                        "       eventually reaches 1 when replaced by the sum of the \r\n" +
//                        "       square of each digit\r\n" +
//                        "            Example 1: n = 19 \r\n" +
//                        "            Output: 19 is a happy number \r\n" +
//                        "            Explain: 1^2 + 9^2 = 82; 8^2  + 2^2 = 68\r\n" +
//                        "            6^2 + 8^2 = 100; 1^2 + 0^2 + 0^2 = 1 \r\n" +
//                        "             \r\n   ";
                        

//         JTextArea introductionLabel = new JTextArea(intro);
//         introductionLabel.setEditable(false);
//         introductionLabel.setLineWrap(true);
//         introductionLabel.setWrapStyleWord(true);
//         introductionLabel.setFont(new Font("Serif", Font.BOLD, 16));
//         introductionLabel.setForeground(new Color(186, 28, 80));
//         //introductionLabel.setForeground(new Color (122, 106, 169));
//         introductionLabel.setPreferredSize(new Dimension(450, 200));
//         introductionLabel.setBackground(Color.WHITE);
//         introductionLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

//         JLabel mode1Label = new JLabel("Happy Number Checker", SwingConstants.CENTER);
//         mode1Label.setFont(new Font("Roboto", Font.BOLD, 17));
//         mode1Label.setForeground(new Color (186, 28, 80));
//         mode1Label.setAlignmentX(Component.CENTER_ALIGNMENT);

//         inputField = new JTextField();
//         inputField.setMaximumSize(new Dimension(175, 80));
//         inputField.setText("Enter your valid number");

        
//         inputField.setForeground(Color.GRAY);
//         inputField.addFocusListener(new FocusListener() {
//         @Override
//         public void focusGained(FocusEvent e) {
//             String input = inputField.getText();
//             if (input.length() > 0 ) {
//                 inputField.setText("");
//                 inputField.setForeground(Color.BLACK);
//             }
//         }
//         @Override
//         public void focusLost(FocusEvent e) {
//             if (inputField.getText().isEmpty()) {
//                 inputField.setForeground(Color.GRAY);
//                 inputField.setText("Enter your valid number");
//             }
//         }
//         });

//         inputField.setFont(new Font("Serif", Font.BOLD, 15));
//         inputField.setBackground(Color.WHITE);
//         inputField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
//         inputField.setAlignmentX(Component.CENTER_ALIGNMENT);
        
//         JButton checkButton = new JButton("Check");
//         checkButton.setBackground(new Color(0x1BC444));
//         checkButton.setFocusPainted(false); // Remove focus border
//         checkButton.setAlignmentX(Component.CENTER_ALIGNMENT);
//         //checkButton.setBorderPainted(false); // Remove border
//         checkButton.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 try {
//                     int number = Integer.parseInt(inputField.getText());
//                     checker.printHappySequence(number);
//                 } catch (NumberFormatException ex) {
//                     JOptionPane.showMessageDialog(null, "Please enter a valid integer.", "Error",
//                             JOptionPane.ERROR_MESSAGE);
//                 }
//             }
//         });

//         JLabel mode2Label = new JLabel("Challenge Yourself!");
//         mode2Label.setFont(new Font("Roboto", Font.BOLD, 17));
//         mode2Label.setForeground(new Color (186, 28, 80));
//         mode2Label.setAlignmentX(Component.CENTER_ALIGNMENT);

//         JButton generateButton = new JButton("Generate Random Number");
//         generateButton.setFocusPainted(false); 
//         generateButton.setBackground(new Color(0xFE6C2B));
//         generateButton.setAlignmentX(Component.CENTER_ALIGNMENT);
//         generateButton.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 randomNumber = (int) (Math.random() * 1000);
//                 inputField.setText(String.valueOf(randomNumber));
//             }
//         });

//         JLabel resultLabel = new JLabel("Is this a Happy Number?");
//         resultLabel.setFont(new Font("Arial", Font.BOLD, 17));
//         resultLabel.setForeground(new Color (186, 28, 80));
//         resultLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        

//         JRadioButton yesButton = new JRadioButton("Yes");
//         JRadioButton noButton = new JRadioButton("No");

//         ButtonGroup group = new ButtonGroup();
//         group.add(yesButton);
//         group.add(noButton);

//         //JButton yesButton = new JButton("Yes");
//         yesButton.setFocusPainted(false); 
//         yesButton.setBackground(new Color(0x1BC444));
//         yesButton.setAlignmentX(Component.CENTER_ALIGNMENT);

//         yesButton.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 boolean isHappy = checker.isHappy(randomNumber);
//                 if (isHappy) {
//                     JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
//                 } else {
//                     JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
//                 }
//             }
//         });

//         //JButton noButton = new JButton("No");
//         noButton.setFocusPainted(false); 
//         noButton.setBackground(new Color(0xDB5230));
//         noButton.setAlignmentX(Component.CENTER_ALIGNMENT);
//         noButton.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 boolean isHappy = checker.isHappy(randomNumber);
//                 if (!isHappy) {
//                     JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
//                 } else {
//                     JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
//                 }
//             }
//         });

//         JButton explainButton = new JButton("Explain");
//         explainButton.setBackground(new Color(0xF2D843));
//         explainButton.setFocusPainted(false); 
//         explainButton.setAlignmentX(Component.CENTER_ALIGNMENT);
//         JButton clearButton = new JButton("Clear Canvas");
//         clearButton.setFocusPainted(false); 
//         clearButton.setBackground(new Color(0x0F96CF));
//         clearButton.setAlignmentX(Component.CENTER_ALIGNMENT);
//         clearButton.addActionListener(new ActionListener() {
//             @Override
//             public void actionPerformed(ActionEvent e) {
//                 resultArea.setText("");
//             }
//         });

//         leftPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 6));
//         leftPanel.add(introductionLabel);
//         leftPanel.add(Box.createVerticalStrut(20));
//         leftPanel.add(mode1Label);
//         leftPanel.add(Box.createVerticalStrut(35));
//         leftPanel.add(inputField);
//         leftPanel.add(Box.createVerticalStrut(25));
//         leftPanel.add(checkButton);
//         leftPanel.add(Box.createVerticalStrut(60));
//         leftPanel.add(mode2Label);
//         leftPanel.add(Box.createVerticalStrut(30));
//         leftPanel.add(generateButton);
//         leftPanel.add(Box.createVerticalStrut(70));
//         leftPanel.add(resultLabel);
//         leftPanel.add(Box.createVerticalStrut(20));
//         leftPanel.add(yesButton);
//         leftPanel.add(Box.createVerticalStrut(20));
//         leftPanel.add(noButton);
//         leftPanel.add(Box.createVerticalStrut(20));
//         leftPanel.add(explainButton);
//         leftPanel.add(Box.createVerticalStrut(20));
//         leftPanel.add(clearButton);
//         leftPanel.add(Box.createVerticalStrut(20));

//         //JPanel rightPanel = new JPanel();
//         // rightPanel.setBackground(Color.lightGray);

//         // resultArea = new JTextArea();
//         // resultArea.setEditable(false);
//         // resultArea.setLineWrap(true);
//         // resultArea.setWrapStyleWord(true);
//         // resultArea.setFont(new Font("Serif", Font.BOLD, 16));
//         // resultArea.setForeground(new Color(103, 134, 198));
//         // resultArea.setPreferredSize(new Dimension(600, 300));
//         // resultArea.setBackground(new Color(255, 236, 233));
//         // resultArea.setBounds(500, 200, 400, 400);
//         // resultArea.setBorder(BorderFactory.createLineBorder(Color.WHITE, 5));
//         //rightPanel.add(resultArea);

    

//         //rightPanel.add(resultArea, BorderLayout.SOUTH);
//         //rightPanel.add(happyNumberPanel, BorderLayout.CENTER);
//         happyNumberPanel.setBackground(new Color(255, 236, 233));
//         frame.add(leftPanel, BorderLayout.WEST);
//         frame.add(happyNumberPanel, BorderLayout.CENTER);
//         frame.pack();
//         frame.setVisible(true);
// }

// public static void main(String[] args) {
//     SwingUtilities.invokeLater(new Runnable(){
//         @Override
//         public void run(){
//             new HappyNumber();
//         }

//     });
// }

// public static JTextArea getResultArea() {
//     return resultArea;
// }

// }
// class Node {
// int data;
// Node next;
// public Node(int data) {
//     this.data = data;
//     this.next = null;
// }

// }

// class check_isHappyNum {
// private Node head;
// private HappyNumberPanel happyNumberPanel;
// public check_isHappyNum(HappyNumberPanel happyNumberPanel){
//     this.happyNumberPanel = happyNumberPanel;
// }

// public int getNext(int n) {
//     int totalSum = 0;
//     while (n > 0) {
//         int d = n % 10;
//         n = n / 10;
//         totalSum += d * d;
//     }
//     return totalSum;
// }
// public boolean isHappy(int n) {
//     int slow = n;
//     int fast = getNext(n);

//     while (fast != 1 && slow != fast) {
//         slow = getNext(slow);
//         fast = getNext(getNext(fast));
//     }

//     return fast == 1;
// }

// public void printHappySequence(int n) {
//     head = new Node(n);
//     Node current = head;
//     String result = String.valueOf(current.data);
//     List<Integer> sequenceList = new ArrayList<>();
//     sequenceList.add(current.data);
//     int cycleStartIndex = -1; 

//     while (true) {
//         int nextValue = getNext(current.data);
//         if (nextValue == 1) {
//             sequenceList.add(nextValue);
//             result += "-->" + nextValue + " Yay number is happy!";
//             break;
//         } else if (contains(head, nextValue)) {
//             cycleStartIndex = sequenceList.indexOf(nextValue);
//             //result += "-->" + nextValue + "(cycle detected - Number is Unhappy :< )";
//             // when cycle detected, set flag
//             happyNumberPanel.drawCycleArrow = true;
//             happyNumberPanel.highlightCycleNode = true;
//             break;
//         }
//         result += "-->" + nextValue;
//         current.next = new Node(nextValue);
//         current = current.next;
//         sequenceList.add(nextValue);
//     }
//     happyNumberPanel.setSequence(sequenceList, cycleStartIndex);
//     if (cycleStartIndex != -1) {
//         happyNumberPanel.drawCycleArrow = true;
//         happyNumberPanel.highlightCycleNode = true;
//     }
//     happyNumberPanel.setSequence(sequenceList, cycleStartIndex);
//     happyNumberPanel.startDrawingSequence();
//     //HappyNumber.getResultArea().append(result + "\n");
// }


// private boolean contains(Node head, int value) {
//     Node current = head;
//     while (current != null) {
//         if (current.data == value) {
//             return true;
//         }
//         current = current.next;
//     }
//     return false;
// }

// public boolean detect_cycle() {
//     if (head == null) {
//         return false;
//     }
//     Node slow = head;
//     Node fast = head.next;
//     while (slow != fast) {
//         if (fast == null || fast.next == null) {
//             return false;
//         }
//         slow = slow.next;
//         fast = fast.next.next;
//     }
//     return true;
// }

// }

import javax.swing.*;
import java.awt.*;
import java.awt.geom.QuadCurve2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.ArrayList;
import java.awt.event.FocusListener;
import java.awt.geom.AffineTransform;
import java.awt.event.FocusEvent;


class HappyNumberPanel extends JPanel{
    private List<Integer> sequence = new ArrayList<>();
    public void setSequence(List<Integer> sequence, int cycleStartIndex){
        this.sequence = sequence;
        this.cycleStartIndex = cycleStartIndex;

        repaint();
    }
    private int cycleStartIndex = -1;
    private int nodeIndexToDraw = 0;
    private Timer timer;
    public boolean drawCycleArrow = false;
    public boolean highlightCycleNode = false;
    private boolean drawToNull = false;
    
    public HappyNumberPanel() {
        timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (nodeIndexToDraw < sequence.size()) {
                    nodeIndexToDraw++;
                    repaint();
                } else if (sequence.get(sequence.size() - 1) == 1 && !drawToNull) {
                    //khi last node = 1, set flag to null
                    drawToNull = true;
                    repaint();
                } else if (drawToNull) {
                    drawToNull = false; 
                    timer.stop();
                } else if (!drawCycleArrow && cycleStartIndex != -1) {
                    drawCycleArrow = true;
                    repaint();
                } else if (drawCycleArrow && !highlightCycleNode) {
                    highlightCycleNode = true;
                    repaint();
                } else {
                    timer.stop();
                }
            }
        });
    }
    class MovingTextPanel extends JPanel {
        private static final int DELAY_MS = 20; // Delay in milliseconds
        private static int xPosition = 0; // Initial x-coordinate for the text
        private String movingText = "Happy Number Checker"; // Text to move
        public MovingTextPanel() {
            Timer timer = new Timer(DELAY_MS, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    xPosition += 2; // Move the text by 2 pixels
                    repaint(); // Redraw the panel
                }
            });
        timer.start();
        }
    
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(Color.BLACK); // Set text color (adjust as needed)
            g.drawString(movingText, xPosition, getHeight() / 2);
        }
    }
    
    
    public void startDrawingSequence(){
        nodeIndexToDraw = 0;
        drawCycleArrow = false;
        highlightCycleNode = false;
        drawToNull = false;
        timer.start();
    }
    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        if (sequence.isEmpty()){
        return;
    }

    Graphics2D g2d = (Graphics2D) g;
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);


    int radius = 20;
    int padding = 10;
    int x = padding;
    int y = getHeight() /2;

    for (int i = 0; i < nodeIndexToDraw; i++) {
        int number = sequence.get(i);
        boolean isCycleStartNode = (i == cycleStartIndex);
        boolean isHappyOneNode = (number == 1);

        // Draw the node
        if (isHappyOneNode && i == sequence.size() - 1) {
            g2d.setColor(Color.GREEN); // Happy one Node
        } else if (isCycleStartNode && highlightCycleNode) {
            g2d.setColor(Color.RED); // Cycle start node
        } else {
            g2d.setColor(Color.PINK); // Regular node
        }
        g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
        g2d.setColor(Color.BLACK);
        g2d.drawOval(x, y - radius, 2 * radius, 2 * radius);

        String numberStr = String.valueOf(number);
        FontMetrics fm = g2d.getFontMetrics();
        int numberX = x + radius - fm.stringWidth(numberStr) / 2;
        int numberY = y + fm.getHeight() / 2 - fm.getDescent();
        g2d.drawString(numberStr, numberX, numberY);


        if (i < sequence.size() - 1) {
            int startX = x + radius*2 ;
            int startY = y;
            int endX = x + 3 * radius + padding- (radius);
            int endY = y;
            drawArrow(g2d, startX, startY, endX, endY);
        }
        x += 2 * radius + padding;
    }
    if (drawToNull && sequence.get(sequence.size() - 1) == 1) {
        int startX = x - radius  + padding;
        int nullX = startX + padding + 20;
        drawArrowToPointingToNull(g2d, startX, y, nullX, y);
        drawNullPointer(g2d, nullX, y);
    }


    if (drawCycleArrow && cycleStartIndex != -1 && cycleStartIndex < sequence.size() - 1) {
        int lastUniqueX = padding + (sequence.size() - 1) * (2 * radius + padding);
        int cycleStartX = padding + cycleStartIndex * (2 * radius + padding);
        drawCurvedArrow(g2d, lastUniqueX, y, cycleStartX, y, radius);
    }else {}
    if (highlightCycleNode && cycleStartIndex != -1) {
        int cycleStartX = padding + cycleStartIndex * (2 * radius + padding);
        highlightNode((Graphics2D) g, cycleStartX, y, radius);
    }else{}}
    private void highlightNode(Graphics2D g2d, int x, int y, int radius) {
        g2d.setColor(Color.YELLOW); 
        g2d.fillOval(x, y - radius, 2 * radius, 2 * radius);
        g2d.setColor(Color.BLACK); 
        g2d.drawOval(x, y - radius, 2 * radius, 2 * radius);

        //number highlight
        String numberStr = String.valueOf(sequence.get(cycleStartIndex));
        FontMetrics fm = g2d.getFontMetrics();
        int numberX = x + radius - fm.stringWidth(numberStr) / 2;
        int numberY = y + fm.getHeight() / 2 - fm.getDescent();
        g2d.drawString(numberStr, numberX, numberY);
    }
 
    private void drawArrowToPointingToNull(Graphics2D g2, int x1, int y1, int x2, int y2) {
        drawArrow(g2, x1, y1, x2, y2); 
    }

    private void drawNullPointer(Graphics2D g2, int x, int y) {
        g2.drawString(" NULL", x, y + 5); 
    }


    private void drawCurvedArrow(Graphics2D g2, int x1, int y1, int x2, int y2, int radius) {
        double angle = Math.atan2(y2 - y1, x2 - x1);
        int startX = (int) (x1 + 12+Math.cos(angle - Math.PI / 2) * radius);
        int startY = (int) (y1 - Math.sin(angle - Math.PI / 2) * radius);
        int endX = (int) (x2 + Math.cos(angle + Math.PI-1 ) * radius);
        int endY = (int) (y2 + Math.sin(angle + Math.PI -1) * radius);
        int ctrlX = (startX - endX+6) / 2;
        int ctrlY =  startY - Math.abs(startX - endX) / 3; 
        g2.setColor(Color.BLUE); // curve 
        g2.setStroke(new BasicStroke(3)); 
        QuadCurve2D q = new QuadCurve2D.Float();
        q.setCurve(startX, startY, ctrlX, ctrlY, endX, endY);
        g2.draw(q);
        drawArrowhead(g2, ctrlX, ctrlY, endX, endY);
        g2.setColor(Color.BLACK);
        g2.setStroke(new BasicStroke(1));
    }

    private void drawArrowhead(Graphics2D g2, int x1, int y1, int x2, int y2) {
        double angle = Math.atan2(y2 - y1, x2 - x1);
        int arrowLength = 10;
        double arrowAngle = Math.PI / 6;
        double x3 = x2 - arrowLength * Math.cos(angle - arrowAngle);
        double y3 = y2 - arrowLength * Math.sin(angle - arrowAngle);
        double x4 = x2 - arrowLength * Math.cos(angle + arrowAngle);
        double y4 = y2 - arrowLength * Math.sin(angle + arrowAngle);

        int[] xPoints = {x2, (int) x3, (int) x4};
        int[] yPoints = {y2, (int) y3, (int) y4};
        g2.fillPolygon(xPoints, yPoints, 3);
    }

    private void drawArrow(Graphics g, int x1, int y1, int x2, int y2) {
        Graphics2D g2 = (Graphics2D) g.create();
        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g2.transform(at);

        g2.drawLine(0, 0, len, 0);
        g2.fillPolygon(new int[]{len, len - 5, len - 5, len},
                    new int[]{0, -5, 5, 0}, 4);
    }
}


public class HappyNumber extends JFrame {
    private JTextField inputField;
    private static JTextArea resultArea;
    private check_isHappyNum checker;
    private int randomNumber;
    private HappyNumberPanel happyNumberPanel;
    public HappyNumber() {

        happyNumberPanel = new HappyNumberPanel();
        checker = new check_isHappyNum(happyNumberPanel);
        JFrame frame = new JFrame("Happy Number Checker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //change
        frame.setSize(getWidth(), getHeight());
        //frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());
        frame.setBackground(Color.GREEN);

        JPanel leftPanel = new JPanel();
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
        leftPanel.setBounds(100, 100, 300, 400);
        leftPanel.setBackground(new Color(254, 197, 216)); //0xFFD1ED
        String intro = "             \r\n" +
                       "       Happy number is a positive integer which \r\n" +
                       "       eventually reaches 1 when replaced by the sum of the \r\n" +
                       "       square of each digit\r\n" +
                       "            Example 1: n = 19 \r\n" +
                       "            Output: 19 is a happy number \r\n" +
                       "            Explain: 1^2 + 9^2 = 82; 8^2  + 2^2 = 68\r\n" +
                       "            6^2 + 8^2 = 100; 1^2 + 0^2 + 0^2 = 1 \r\n" +
                       "             \r\n   ";
                        

        JTextArea introductionLabel = new JTextArea(intro);
        introductionLabel.setEditable(false);
        introductionLabel.setLineWrap(true);
        introductionLabel.setWrapStyleWord(true);
        introductionLabel.setFont(new Font("Roboto", Font.BOLD, 16));
        introductionLabel.setForeground(new Color(186, 28, 80));
        //introductionLabel.setForeground(new Color (122, 106, 169));
        introductionLabel.setPreferredSize(new Dimension(450, 200));
        introductionLabel.setBackground(Color.WHITE);
        introductionLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel mode1Label = new JLabel("Happy Number Checker", SwingConstants.CENTER);
        mode1Label.setFont(new Font("Roboto", Font.BOLD, 17));
        mode1Label.setForeground(new Color (186, 28, 80));
        mode1Label.setAlignmentX(Component.CENTER_ALIGNMENT);

        inputField = new JTextField();
        inputField.setMaximumSize(new Dimension(175, 80));
        inputField.setText("Enter your valid number");

        
        inputField.setForeground(Color.GRAY);
        inputField.addFocusListener(new FocusListener() {
        @Override
        public void focusGained(FocusEvent e) {
            String input = inputField.getText();
            if (input.length() > 0 ) {
                inputField.setText("");
                inputField.setForeground(Color.BLACK);
            }
        }
        @Override
        public void focusLost(FocusEvent e) {
            if (inputField.getText().isEmpty()) {
                inputField.setForeground(Color.GRAY);
                inputField.setText("Enter your valid number");
            }
        }
        });

        inputField.setFont(new Font("Serif", Font.BOLD, 15));
        inputField.setBackground(Color.WHITE);
        inputField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        inputField.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JButton checkButton = new JButton("Check");
        checkButton.setBackground(new Color(0x1BC444));
        checkButton.setFocusPainted(false); // Remove focus border
        checkButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        //checkButton.setBorderPainted(false); // Remove border
        checkButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int number = Integer.parseInt(inputField.getText());
                    checker.printHappySequence(number);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid integer.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JLabel mode2Label = new JLabel("Challenge Yourself!");
        mode2Label.setFont(new Font("Roboto", Font.BOLD, 17));
        mode2Label.setForeground(new Color (186, 28, 80));
        mode2Label.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton generateButton = new JButton("Generate Random Number");
        generateButton.setFocusPainted(false); 
        generateButton.setBackground(new Color(0xFE6C2B));
        generateButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                randomNumber = (int) (Math.random() * 1000);
                inputField.setText(String.valueOf(randomNumber));
            }
        });

        JLabel resultLabel = new JLabel("Is this a Happy Number?");
        resultLabel.setFont(new Font("Arial", Font.BOLD, 17));
        resultLabel.setForeground(new Color (186, 28, 80));
        resultLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        

        JRadioButton yesButton = new JRadioButton("Yes");
        JRadioButton noButton = new JRadioButton("No");

        ButtonGroup group = new ButtonGroup();
        group.add(yesButton);
        group.add(noButton);

        //JButton yesButton = new JButton("Yes");
        yesButton.setFocusPainted(false); 
        yesButton.setBackground(new Color(0x1BC444));
        yesButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        yesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean isHappy = checker.isHappy(randomNumber);
                if (isHappy) {
                    JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        //JButton noButton = new JButton("No");
        noButton.setFocusPainted(false); 
        noButton.setBackground(new Color(0xDB5230));
        noButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        noButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean isHappy = checker.isHappy(randomNumber);
                if (!isHappy) {
                    JOptionPane.showMessageDialog(null, "AWESOME!", "Result", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Oh no, you lose", "Result", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JButton explainButton = new JButton("Explain");
        explainButton.setBackground(new Color(0xF2D843));
        explainButton.setFocusPainted(false); 
        explainButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        JButton clearButton = new JButton("Clear Canvas");
        clearButton.setFocusPainted(false); 
        clearButton.setBackground(new Color(0x0F96CF));
        clearButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resultArea.setText("");
            }
        });

        leftPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE, 6));
        leftPanel.add(introductionLabel);
        leftPanel.add(Box.createVerticalStrut(20));
        leftPanel.add(mode1Label);
        leftPanel.add(Box.createVerticalStrut(35));
        leftPanel.add(inputField);
        leftPanel.add(Box.createVerticalStrut(25));
        leftPanel.add(checkButton);
        leftPanel.add(Box.createVerticalStrut(60));
        leftPanel.add(mode2Label);
        leftPanel.add(Box.createVerticalStrut(30));
        leftPanel.add(generateButton);
        leftPanel.add(Box.createVerticalStrut(70));
        leftPanel.add(resultLabel);
        leftPanel.add(Box.createVerticalStrut(20));
        leftPanel.add(yesButton);
        leftPanel.add(Box.createVerticalStrut(20));
        leftPanel.add(noButton);
        leftPanel.add(Box.createVerticalStrut(20));
        leftPanel.add(explainButton);
        leftPanel.add(Box.createVerticalStrut(20));
        leftPanel.add(clearButton);
        leftPanel.add(Box.createVerticalStrut(20));

        //JPanel rightPanel = new JPanel();
        // rightPanel.setBackground(Color.lightGray);

        // resultArea = new JTextArea();
        // resultArea.setEditable(false);
        // resultArea.setLineWrap(true);
        // resultArea.setWrapStyleWord(true);
        // resultArea.setFont(new Font("Serif", Font.BOLD, 16));
        // resultArea.setForeground(new Color(103, 134, 198));
        // resultArea.setPreferredSize(new Dimension(600, 300));
        // resultArea.setBackground(new Color(255, 236, 233));
        // resultArea.setBounds(500, 200, 400, 400);
        // resultArea.setBorder(BorderFactory.createLineBorder(Color.WHITE, 5));
        //rightPanel.add(resultArea);

    

        //rightPanel.add(resultArea, BorderLayout.SOUTH);
        //rightPanel.add(happyNumberPanel, BorderLayout.CENTER);
        // JLabel rightLabel = new JLabel("Happy Number Checker", SwingConstants.CENTER);
        // rightLabel.setFont(new Font("Roboto", Font.BOLD, 30));
        // rightLabel.setForeground(new Color (186, 28, 80));
        // rightLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        // happyNumberPanel.add(new MovingTextPanel());

        happyNumberPanel.setBackground(new Color(255, 236, 233));
        frame.add(leftPanel, BorderLayout.WEST);
        frame.add(happyNumberPanel, BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);
        // change 
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
}

public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable(){
        @Override
        public void run(){
            new HappyNumber();
        }

    });
}

public static JTextArea getResultArea() {
    return resultArea;
}

}
class Node {
int data;
Node next;
public Node(int data) {
    this.data = data;
    this.next = null;
}

}

class check_isHappyNum {
private Node head;
private HappyNumberPanel happyNumberPanel;
public check_isHappyNum(HappyNumberPanel happyNumberPanel){
    this.happyNumberPanel = happyNumberPanel;
}

public int getNext(int n) {
    int totalSum = 0;
    while (n > 0) {
        int d = n % 10;
        n = n / 10;
        totalSum += d * d;
    }
    return totalSum;
}
public boolean isHappy(int n) {
    int slow = n;
    int fast = getNext(n);

    while (fast != 1 && slow != fast) {
        slow = getNext(slow);
        fast = getNext(getNext(fast));
    }

    return fast == 1;
}

public void printHappySequence(int n) {
    head = new Node(n);
    Node current = head;
    String result = String.valueOf(current.data);
    List<Integer> sequenceList = new ArrayList<>();
    sequenceList.add(current.data);
    int cycleStartIndex = -1; 

    while (true) {
        int nextValue = getNext(current.data);
        if (nextValue == 1) {
            sequenceList.add(nextValue);
            result += "-->" + nextValue + " Yay number is happy!";
            break;
        } else if (contains(head, nextValue)) {
            cycleStartIndex = sequenceList.indexOf(nextValue);
            //result += "-->" + nextValue + "(cycle detected - Number is Unhappy :< )";
            // when cycle detected, set flag
            happyNumberPanel.drawCycleArrow = true;
            happyNumberPanel.highlightCycleNode = true;
            break;
        }
        result += "-->" + nextValue;
        current.next = new Node(nextValue);
        current = current.next;
        sequenceList.add(nextValue);
    }
    happyNumberPanel.setSequence(sequenceList, cycleStartIndex);
    if (cycleStartIndex != -1) {
        happyNumberPanel.drawCycleArrow = true;
        happyNumberPanel.highlightCycleNode = true;
    }
    happyNumberPanel.setSequence(sequenceList, cycleStartIndex);
    happyNumberPanel.startDrawingSequence();
    //HappyNumber.getResultArea().append(result + "\n");
}


private boolean contains(Node head, int value) {
    Node current = head;
    while (current != null) {
        if (current.data == value) {
            return true;
        }
        current = current.next;
    }
    return false;
}

public boolean detect_cycle() {
    if (head == null) {
        return false;
    }
    Node slow = head;
    Node fast = head.next;
    while (slow != fast) {
        if (fast == null || fast.next == null) {
            return false;
        }
        slow = slow.next;
        fast = fast.next.next;
    }
    return true;
}

}
